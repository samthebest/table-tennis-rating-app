{
  "paragraphs": [
    {
      "text": "%md\n\n### DISCLAIMER\n\nThis was developed purely after hours because the creators have no life.\n\n### README\n\nThe point of this rating system is:\n\n - to encourage greater diversity of play between players - i.e. to encourage players to play against people they would not normally.\n - to help find players of similar levels\n\n#### Rating Rules:\n\n - No cheating! This is an honour system, anyone can hack it, just don't (unless you are 12, then go ahead)\n - Try to verbally agree prior to play that a game is rated\n\n#### Ping Pong Rules\n\n - When serving, you must throw the ball up at least 6 inches roughly vertically before striking the ball.\n - When serving, you must hold the ball in an open palm behind the table edge and above it before throwing it up.\n - When serving, when you strike the ball, it must be behind the table edge.\n - Players may not put free hand on the playing surface during a rally. Doing so results in losing the point.\n - In case of a player committing an accidental volley, the point goes to said player only if the ball was out of play (i.e. passed the table's borders) at the time.\n - No biting\n - The obvious ones\n\n#### Feature Requests\n\n - Persistance (so we can store dates, and necessary for clicky buttons stage)\n - Other player analytics (like opponent diversity, ratings over time)\n - Plot ratings over time\n - Clicky buttons!!\n - Machine Learning algorithm to match players to mix up the games and get people to learn\n - (much later, v999) Queueing system with notifications\n",
      "dateUpdated": "2016-08-12T15:56:21+0000",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1470330706554_-1759710839",
      "id": "20160804-171146_2054398816",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<h3>DISCLAIMER</h3>\n<p>This was developed purely after hours because the creators have no life.</p>\n<h3>README</h3>\n<p>The point of this rating system is:</p>\n<ul>\n<li>to encourage greater diversity of play between players - i.e. to encourage players to play against people they would not normally.</li>\n<li>to help find players of similar levels</li>\n</ul>\n<h4>Rating Rules:</h4>\n<ul>\n<li>No cheating! This is an honour system, anyone can hack it, just don't (unless you are 12, then go ahead)</li>\n<li>Try to verbally agree prior to play that a game is rated</li>\n</ul>\n<h4>Ping Pong Rules</h4>\n<ul>\n<li>When serving, you must throw the ball up at least 6 inches roughly vertically before striking the ball.</li>\n<li>When serving, you must hold the ball in an open palm behind the table edge and above it before throwing it up.</li>\n<li>When serving, when you strike the ball, it must be behind the table edge.</li>\n<li>Players may not put free hand on the playing surface during a rally. Doing so results in losing the point.</li>\n<li>In case of a player committing an accidental volley, the point goes to said player only if the ball was out of play (i.e. passed the table's borders) at the time.</li>\n<li>No biting</li>\n<li>The obvious ones</li>\n</ul>\n<h4>Feature Requests</h4>\n<ul>\n<li>Persistance (so we can store dates, and necessary for clicky buttons stage)</li>\n<li>Other player analytics (like opponent diversity, ratings over time)</li>\n<li>Plot ratings over time</li>\n<li>Clicky buttons!!</li>\n<li>Machine Learning algorithm to match players to mix up the games and get people to learn</li>\n<li>(much later, v999) Queueing system with notifications</li>\n</ul>\n"
      },
      "dateCreated": "2016-08-04T05:11:46+0000",
      "dateStarted": "2016-08-12T15:56:21+0000",
      "dateFinished": "2016-08-12T15:56:21+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:11421"
    },
    {
      "title": "Run Me After Server Restarts",
      "text": "import scala.io.Source\n\ncase class Player(name: String, rating: Int = 0, wins: Int = 0, losses: Int = 0)\n\ncase class Game(winnerName: String, loserName: String, points: Option[List[(Int, Int)]] = None, ts: Long = System.currentTimeMillis()) {\n  def toTsv: String = winnerName + \"\\t\" + loserName + \"\\t\" + ts + \"\\t\" + points.map(_.map(_.productIterator.toList.mkString(\";\")).mkString(\",\")).getOrElse(\"\")\n}\n\n// http://www.teamusa.org/usa-table-tennis/ratings/how-does-the-usatt-rating-system-work\nobject TTRA {\n\n  private var gameLog: Vector[Game] = Vector.empty\n  // Prevents typos\n  private var approvedPlayerList: Set[String] = Set.empty\n\n  def addGame(winnerName: String, loserName: String): Unit = {\n    require(approvedPlayerList(winnerName), \"ERROR: Name spelt wrong, or not in approved list: \" + winnerName)\n    require(approvedPlayerList(loserName), \"ERROR: Name spelt wrong, or not in approved list: \" + loserName)\n    gameLog = gameLog :+ Game(winnerName, loserName)\n  }\n\n  def addGame(winnerName: String, loserName: String, points: List[(Int, Int)]): Unit = {\n    require(approvedPlayerList(winnerName), \"ERROR: Name spelt wrong, or not in approved list: \" + winnerName)\n    require(approvedPlayerList(loserName), \"ERROR: Name spelt wrong, or not in approved list: \" + loserName)\n    gameLog = gameLog :+ Game(winnerName, loserName, Some(points))\n  }\n\n  def addPlayer(name: String): Unit = {\n    // TODO require name is of form first.last so people can email each other\n    approvedPlayerList = approvedPlayerList + name\n  }\n\n  def getPlayerList: Set[String] = approvedPlayerList\n  def getGameLog: Vector[Game] = gameLog\n  def getGameLogPretty: Vector[String] = gameLog.map(game => game.winnerName + \"\\t\" + game.loserName + \"\\t\" + new java.text.SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(new java.util.Date(game.ts)))\n\n  def reset(): Unit = gameLog = Vector.empty\n\n  def ratingAdjustment(winner: Int, loser: Int): Int = (math.abs(winner - loser), winner > loser) match {\n    case (diff, true) if diff <= 12 => 8\n    case (diff, false) if diff <= 12 => 8\n\n    case (diff, true) if diff <= 37 => 7\n    case (diff, false) if diff <= 37 => 10\n\n    case (diff, true) if diff <= 62 => 6\n    case (diff, false) if diff <= 62 => 13\n\n    case (diff, true) if diff <= 87 => 5\n    case (diff, false) if diff <= 87 => 16\n\n    case (diff, true) if diff <= 112 => 4\n    case (diff, false) if diff <= 112 => 20\n\n    case (diff, true) if diff <= 137 => 3\n    case (diff, false) if diff <= 137 => 25\n\n    case (diff, true) if diff <= 162 => 2\n    case (diff, false) if diff <= 162 => 30\n\n    case (diff, true) if diff <= 187 => 2\n    case (diff, false) if diff <= 187 => 35\n\n    case (diff, true) if diff <= 212 => 1\n    case (diff, false) if diff <= 212 => 40\n\n    case (diff, true) if diff <= 237 => 1\n    case (diff, false) if diff <= 237 => 45\n\n    case (_, true) => 0\n    case (_, false) => 50\n  }\n\n  def updatePlayerWin(player: Player, adjustment: Int): Player =\n    player.copy(rating = player.rating + adjustment, wins = player.wins + 1)\n\n  def updatePlayerLose(player: Player, adjustment: Int): Player = {\n    if (player.rating - adjustment >= 0) player.copy(rating = player.rating - adjustment, losses = player.losses + 1)\n    else player.copy(rating = 0, losses = player.losses + 1)\n  }\n\n  // When gameLog gets large we will probably want to put some caching logic in\n  def constructState: Map[String, Player] = gameLog.foldLeft(Map.empty[String, Player]) {\n    case (m, Game(winnerName, loserName, _, _)) =>\n      val winner = m.getOrElse(winnerName, Player(winnerName))\n      val loser = m.getOrElse(loserName, Player(loserName))\n\n      val adjustment = ratingAdjustment(winner.rating, loser.rating)\n\n      m.updated(winnerName, updatePlayerWin(winner, adjustment))\n      .updated(loserName, updatePlayerLose(loser, adjustment))\n  }\n\n  def sortedState: List[Player] = constructState.values.toList.sortBy(-_.rating)\n\n  def export: String = gameLog.map(_.toTsv).mkString(\"\\n\")\n\n  val path = \"/usr/zeppelin/fp-db.tsv\"\n\n  // TODO Recover points, should anyone ever bother to use that feature\n  def load(): Unit = {\n    gameLog =\n      Source.fromFile(path).getLines().map(_.split(\"\\t\", -1).toList match {\n        case winner :: loser :: ts :: points :: Nil => Game(winner, loser, ts = ts.toLong)\n      })\n      .toVector\n\n    approvedPlayerList = approvedPlayerList ++ gameLog.flatMap(g => List(g.winnerName, g.loserName))\n  }\n\n  // Useful when people make a mistake\n  def removeGame(game: Game): Unit = gameLog = gameLog.filter(_ != game)\n\n  implicit class PimpedString(s: String) {\n    def write(p: String): Unit = {\n      val pw = new java.io.PrintWriter(new java.io.File(p))\n      try pw.write(s) finally pw.close()\n    }\n  }\n\n  // TODO Rotation (again, in case of mistake)\n  def save(): Unit = export.write(path)\n\n  def backup(): Unit = export.write(path + \".\" + System.currentTimeMillis())\n\n  // Ideas: prizes should be awarded for players who:\n  // 1. Increase in rank the most\n  // 2. Play the most number of different players\n  // 3. Play the most number of new players\n  // 4. Keep playing even after a bunch of losses\n}\n\ncase class DropDownMenu(id: String, label: String)\n\nimport TTRA._\n\nload()\n",
      "dateUpdated": "2016-08-12T17:43:05+0000",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "tableHide": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1470330671575_-1357125571",
      "id": "20160804-171111_1973963899",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import scala.io.Source\ndefined class Player\n<console>:160: warning: match may not be exhaustive.\nIt would fail on the following input: List(_, _, _, _, _)\n             Source.fromFile(path).getLines().map(_.split(\"\\t\", -1).toList match {\n                                                                    ^\ndefined class Game\ndefined module TTRA\ndefined class DropDownMenu\nimport TTRA._\n"
      },
      "dateCreated": "2016-08-04T05:11:11+0000",
      "dateStarted": "2016-08-12T15:57:02+0000",
      "dateFinished": "2016-08-12T15:57:03+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:11422",
      "focus": true
    },
    {
      "title": "Add Players",
      "text": "// TODO Will be replaced with a GUI\naddPlayer(\"NOT SELECTED\")\naddPlayer(\"foo.bar\")\n",
      "dateUpdated": "2016-08-12T17:42:33+0000",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1470387006330_-1707519838",
      "id": "20160805-085006_1117015257",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "2016-08-05T08:50:06+0000",
      "dateStarted": "2016-08-12T15:57:27+0000",
      "dateFinished": "2016-08-12T15:57:29+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:11423",
      "focus": true
    },
    {
      "title": "Run Me After Adding a Player",
      "text": "val playersMenuOptions = getPlayerList.toArray.map(name => DropDownMenu(name, name))\nz.angularBind(\"myOptions\", playersMenuOptions)\nz.angularBind(\"selectedOptionWinner\", Array(DropDownMenu(\"NOT SELECTED\", \"NOT SELECTED\")))\nz.angularBind(\"selectedOptionLoser\", Array(DropDownMenu(\"NOT SELECTED\", \"NOT SELECTED\")))",
      "dateUpdated": "2016-08-12T15:57:32+0000",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "tableHide": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1470736040981_-331803413",
      "id": "20160809-094720_496953447",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "2016-08-09T09:47:20+0000",
      "dateStarted": "2016-08-12T15:57:32+0000",
      "dateFinished": "2016-08-12T15:57:33+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:11424",
      "focus": true
    },
    {
      "title": "Enter Game Players",
      "text": "%angular \n<label>THE MIGHTY WINNER:</label><select name=\"mySelectWinner\" style=\"background-color:transparent\" ng-options=\"opt.id as opt.label for opt in myOptions\" ng-model=\"selectedOptionWinner\"></select>\n<label>THE PATHETIC WORTHLESS LOSER:</label><select name=\"mySelectLoser\" style=\"background-color:transparent\" ng-options=\"opt.id as opt.label for opt in myOptions\" ng-model=\"selectedOptionLoser\"></select>",
      "dateUpdated": "2016-08-12T17:32:27+0000",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1470939171463_13968442",
      "id": "20160811-181251_988743053",
      "dateCreated": "2016-08-11T06:12:51+0000",
      "dateStarted": "2016-08-12T17:27:31+0000",
      "dateFinished": "2016-08-12T17:27:31+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:11425",
      "errorMessage": "",
      "focus": true
    },
    {
      "title": "Run Me After Entering Game Players",
      "text": "reset()\nload()\nval winner = z.angular(\"selectedOptionWinner\").toString\nval loser = z.angular(\"selectedOptionLoser\").toString\nif (winner == null || loser == null || winner == \"\" || loser == \"\" || winner == \"NOT SELECTED\" || loser == \"NOT SELECTED\" || winner.contains(\"DropDownMenu\") || loser.contains(\"DropDownMenu\")) {\n  println(\".\")\n  println(\"UTS ERROR: User too stupid\")\n} else {\n    addGame(winner, loser)\n    save()\n    println(\"SUCCESS! Well done you added a game, run the Rankings cell to see how crap you are!\")\n    println(\"Most recent 10 games:\")\n    getGameLogPretty.takeRight(10).foreach(println)\n}",
      "dateUpdated": "2016-08-12T17:42:44+0000",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1470388623815_1398283842",
      "id": "20160805-091703_1033650606",
      "dateCreated": "2016-08-05T09:17:03+0000",
      "dateStarted": "2016-08-12T17:33:30+0000",
      "dateFinished": "2016-08-12T17:33:31+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:11426",
      "errorMessage": "",
      "focus": true
    },
    {
      "title": "Rankings",
      "text": "z.show(sqlContext.createDataFrame(sortedState))",
      "dateUpdated": "2016-08-12T17:27:09+0000",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [
            {
              "name": "name",
              "index": 0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "rating",
              "index": 1,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "name",
              "index": 0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "rating",
              "index": 1,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "helium": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1470388799096_-6307757",
      "id": "20160805-091959_523364477",
      "dateCreated": "2016-08-05T09:19:59+0000",
      "dateStarted": "2016-08-12T17:27:10+0000",
      "dateFinished": "2016-08-12T17:27:10+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:11427",
      "errorMessage": "",
      "focus": true
    },
    {
      "title": "Admin Cell",
      "text": "\nload()\n\n// Run this to make a backup of the DB which may become useful for recovery if users break stuff\n//backup()\n\n// Use this to view a game history in tsv format:\n export.split(\"\\n\").takeRight(20).mkString(\"\\n\")\n\n// Use this to view a game history as Vector[Game]\n//getGameLog()\n\n// User this to remove a specific game (timestamp is needed) when users do stupid things\n//removeGame(Game(.... ))\n",
      "dateUpdated": "2016-08-12T17:33:18+0000",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 364,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1470938695954_1577914713",
      "id": "20160811-180455_660178794",
      "dateCreated": "2016-08-11T06:04:55+0000",
      "dateStarted": "2016-08-12T17:33:18+0000",
      "dateFinished": "2016-08-12T17:33:18+0000",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:11428",
      "errorMessage": "",
      "focus": true
    },
    {
      "text": "%md ",
      "dateUpdated": "2016-08-12T15:48:56+0000",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1471000997108_-1262411694",
      "id": "20160812-112317_89475784",
      "dateCreated": "2016-08-12T11:23:17+0000",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:11430"
    }
  ],
  "name": "Table Tennis Rating App",
  "id": "2BSHVRNE1",
  "lastReplName": {
    "value": "angular"
  },
  "angularObjects": {
    "2BSX9DNNB:shared_process": [],
    "2BTU3JC93:shared_process": [],
    "2BVR8ZNZ3:shared_process": [],
    "2BSF9CTEQ:shared_process": [],
    "2BTFWJ52Z:shared_process": [],
    "2BV2Q64RV:shared_process": [],
    "2BTMA856M:shared_process": [],
    "2BSD7J8GZ:shared_process": [],
    "2BU81F479:shared_process": [],
    "2BTDREBE9:shared_process": [],
    "2BVARXAWM:shared_process": [],
    "2BSKYYW7B:shared_process": [],
    "2BU91M8XK:shared_process": [],
    "2BVYNFRKP:shared_process": [],
    "2BSD14WNP:shared_process": [],
    "2BSBV6UPS:shared_process": [],
    "2BT2Z3SEP:shared_process": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}